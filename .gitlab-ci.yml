stages:
  - test
  - build
  - deploy

variables:
  PROJECT_DIR: "$CI_PROJECT_DIR/nadinsoftTask"
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/devops-task"
  IMAGE_TAG: "$CI_COMMIT_SHA"

# --- TEST (shell) ---
test:
  stage: test
  before_script:
    - python3 --version || sudo apt-get update && sudo apt-get install -y python3 python3-venv python3-pip
    - test -d "$PROJECT_DIR" && cd "$PROJECT_DIR" || cd "$CI_PROJECT_DIR"
    - python3 -m venv .venv
    - . .venv/bin/activate
    - pip install -U pip
    - if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install flask; fi
  script:
    - python -m unittest discover -s . || echo "No tests yet"
  after_script:
    - deactivate || true

# --- BUILD (shell + docker host) ---
build:
  stage: build
  before_script:
    - docker version
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - test -d "$PROJECT_DIR" && cd "$PROJECT_DIR" || cd "$CI_PROJECT_DIR"
  script:
    - docker pull "$IMAGE_NAME:latest" || true
    - docker build --cache-from "$IMAGE_NAME:latest" -t "$IMAGE_NAME:$IMAGE_TAG" -t "$IMAGE_NAME:latest" .
    - docker push "$IMAGE_NAME:$IMAGE_TAG"
    - docker push "$IMAGE_NAME:latest"
  rules:
    - if: '$CI_COMMIT_BRANCH'  # روی همه برنچ‌ها

# --- DEPLOY (shell + docker compose) ---
deploy:
  stage: deploy
  before_script:
    - docker compose version || echo "⚠️ Docker Compose v2 لازم است (docker compose)."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - test -d "$PROJECT_DIR" && cd "$PROJECT_DIR" || cd "$CI_PROJECT_DIR"
    - export IMAGE="$IMAGE_NAME:latest"
  script:
    - docker compose pull
    - docker compose up -d --remove-orphans --wait --wait-timeout 180
    - docker compose ps
    - docker compose logs --no-color --tail=200 || true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      allow_failure: false
