stages: [build, test, deploy]

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

# ---------------------------------------
build:
  stage: build
  tags: ["shell"]
  script:
    - set -eo pipefail
    - docker version

    # 1) محاسبه نام ریپو به‌صورت امن (lowercase + حذف کاراکترهای نامعتبر)
    # اگر DOCKERHUB_REPO از قبل تعریف شده بود، همان استفاده می‌شود؛
    # وگرنه از <username>/<project> ساخته و پاکسازی می‌کنیم.
    - RAW_REPO="${DOCKERHUB_REPO:-$DOCKERHUB_USERNAME/$CI_PROJECT_NAME}"
    - SAFE_REPO="$(echo "$RAW_REPO" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9._/-]+/-/g')"
    - echo "Using Docker Hub repo: $SAFE_REPO"

    # 2) لاگین Docker Hub
    - echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" docker.io --password-stdin

    # 3) Build & Push
    - docker build -t "docker.io/$SAFE_REPO:$CI_COMMIT_SHORT_SHA" -t "docker.io/$SAFE_REPO:latest" .
    - docker push "docker.io/$SAFE_REPO:$CI_COMMIT_SHORT_SHA"
    - docker push "docker.io/$SAFE_REPO:latest"

# ---------------------------------------
test:
  stage: test
  tags: ["shell"]
  before_script:
    - set -eo pipefail
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - pip install -q pytest
  script:
    - pytest -q
  needs: ["build"]

# ---------------------------------------
deploy:
  stage: deploy
  tags: ["shell"]
  before_script:
    - set -eo pipefail
    - apk add --no-cache openssh-client || sudo apt-get update && sudo apt-get install -y openssh-client || true
    - mkdir -p ~/.ssh
    - echo "$DEPLOY_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$DEPLOY_HOST" >> ~/.ssh/known_hosts
  script: |
    set -euo pipefail
    # همان منطق پاکسازی نام ریپو در سمت سرور
    RAW_REPO="${DOCKERHUB_REPO:-$DOCKERHUB_USERNAME/$CI_PROJECT_NAME}"
    SAFE_REPO=$(echo "$RAW_REPO" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9._\/-]+/-/g')

    ssh -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_HOST '
      set -euo pipefail
      cd '"$DEPLOY_PATH"'
      echo '"$DOCKERHUB_TOKEN"' | docker login -u '"$DOCKERHUB_USERNAME"' docker.io --password-stdin
      export IMAGE=docker.io/'"$SAFE_REPO"':latest
      docker compose pull || true
      docker compose up -d --build --remove-orphans
      docker image prune -f
    '
  needs: ["build"]
