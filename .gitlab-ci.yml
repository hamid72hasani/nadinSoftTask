stages: [build, test, deploy]

variables:
  DOCKER_TLS_CERTDIR: ""   # اختیاری؛ برای اطمینان خاموش
  DOCKER_DRIVER: overlay2

# هیچ services: ای نذار؛ dind را حذف کن
build:
  stage: build
  image: docker:24.0.5
  tags: ["docker"]                 # با تگ رانرت هماهنگ باشه
  script:
    - docker version
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" $CI_REGISTRY --password-stdin
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - docker push "$CI_REGISTRY_IMAGE:latest"

test:
  stage: test
  image: python:3.11-slim
  tags: ["docker"]
  before_script:
    - pip install -r requirements.txt
    - pip install -q pytest
  script:
    - pytest -q
  needs: ["build"]

deploy:
  stage: deploy
  image: alpine:3.20
  tags: ["docker"]
  before_script:
    - apk add --no-cache openssh-client bash docker-cli
    - mkdir -p ~/.ssh
    - echo "$DEPLOY_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$DEPLOY_HOST" >> ~/.ssh/known_hosts
  script: |
    ssh -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_HOST '
      set -e
      cd '"$DEPLOY_PATH"'
      docker login '"$CI_REGISTRY"' -u '"$CI_REGISTRY_USER"' -p '"$CI_REGISTRY_PASSWORD"'
      export IMAGE='"$CI_REGISTRY_IMAGE"':latest
      docker compose pull || true
      docker compose up -d --build --remove-orphans
      docker image prune -f
    '
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
